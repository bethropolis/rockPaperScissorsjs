class Play{constructor(e=10,t=" "){this.user=t,this.computer,this.userScore=0,this.computerScore=0,this.rounds=e,this.friend,this.round=0,this.multy=!1,this.choices=["rock","paper","scissors"]}RPS_switch(e){return this.choices.indexOf(e)+1}Compute(){const e=Math.floor(this.choices.length*Math.random());return this.computer=this.choices[e],this.computer}Roll(e){this.multy=!1;const t=this.getUserChoice(e.toLowerCase()),r=this.getComputerChoice();return this.round+=1,this.checkEndPlay()?this.getGameSummary():this.getGameResult(t,r)}increment(e){e?this.userScore+=1:this.computerScore+=1}Scores(){return{user:this.userScore,opponent:this.computerScore}}Choices(e){2==e.length&&(this.choices=e)}checkEndPlay(){return this.round>=this.rounds}Clear(){this.round=0,this.userScore=0,this.computerScore=0}getUserChoice(e,t=!1){if(this.choices.find((t=>t==e)))return t?this.updateUser(e,!0):this.updateUser(e);throw new Error(`Invalid input. Please enter ${this.choices}`)}updateUser(e,t=!1){return t?this.friend=e:this.user=e}getComputerChoice(){return this.Compute()}Multiplayer(e=this.user,t=this.friend){this.multy=!0;const r=this.getUserChoice(e.toLowerCase()),s=this.getUserChoice(t.toLowerCase(),!0);return this.getGameResult(r,s,!0)}getGameResult(e,t,r=!1){return{user:e,[r?"friend":"computer"]:t,won:this.Won(this.RPS_switch(e),this.RPS_switch(t)),uscore:this.userScore,cscore:this.computerScore}}Won(e,t){const r=(e-t+3)%3;return 1===r?(this.increment(!0),!0):2===r?(this.increment(),!1):"draw"}getGameSummary(){let e,t=this.multy?"friend":"computer";return e=this.userScore>this.computerScore?"You win!":this.computerScore>this.userScore?`${t} wins!`:"It's a tie!",{userScore:this.userScore,computerScore:this.computerScore,result:e}}}"undefined"!=typeof module&&module.exports&&(module.exports=Play);